# This is a REAL Lang808 program designed to run on the SAMD21 Xplained Pro Discovery Kit

# Here we define the PortA peripheral
# You can find the register definitions in the datasheet for the SAMD21
MemoryMappedPeripheral PortA @0x41004400 {
    dir: u32;
    dirclr: u32;
    dirset: u32;
    dirtgl: u32;
    out: u32;
    outclr: u32;
    outset: u32;
    outtgl: u32;
    in: u32;
    ctrl: BitField32 {
        sampling: 32;
    };
    wrconfig: BitField32 {
        pinmask: 16;
        pmuxen: 1;
        inen: 1;
        pullen: 1;
        $unused: 3;
        drvstr: 1;
        $unused: 1;
        pmux: 4;
        wrpmux: 1;
        $unused: 1;
        wrpincfg: 1;
        hwsel: 1;
    };
}

# Here we define the PortB peripheral
# You can find the register definitions in the datasheet for the SAMD21
MemoryMappedPeripheral PortB @0x41004480 {
    dir: u32;
    dirclr: u32;
    dirset: u32;
    dirtgl: u32;
    out: u32;
    outclr: u32;
    outset: u32;
    outtgl: u32;
    in: u32;
    ctrl: BitField32 {
        sampling: 32;
    };
    wrconfig: BitField32 {
        pinmask: 16;
        pmuxen: 1;
        inen: 1;
        pullen: 1;
        $unused: 3;
        drvstr: 1;
        $unused: 1;
        pmux: 4;
        wrpmux: 1;
        $unused: 1;
        wrpincfg: 1;
        hwsel: 1;
    };
}

# Here we define the GCLK peripheral
# You can find the register definitions in the datasheet for the SAMD21
MemoryMappedPeripheral GCLK @0x40000C00 {
    ctrl: BitField8 {
        swrst: 1;
        $unused: 7;
    };
    status: BitField8 {
        $unused: 7;
        syncbusy: 1;
    };
    clkctrl: BitField16 {
        id: BitEnum6 {
            dfll48 = 0x0;
            fdpll = 0x1;
            fdpll32k = 0x2;
            wdt = 0x3;
            rtc = 0x4;
            eic = 0x5;
            usb = 0x6;
            evsys_0 = 0x7;
            evsys_1 = 0x8;
            evsys_2 = 0x9;
            evsys_3 = 0xa;
            evsys_4 = 0xb;
            evsys_5 = 0xc;
            evsys_6 = 0xd;
            evsys_7 = 0xe;
            evsys_8 = 0xf;
            evsys_9 = 0x10;
            evsys_10 = 0x11;
            evsys_11 = 0x12;
            sercomx_slow = 0x13;
            sercom0_core = 0x14;
            sercom1_core = 0x15;
            sercom2_core = 0x16;
            sercom3_core = 0x17;
            sercom4_core = 0x18;
            sercom5_core = 0x19;
            tcc0_tcc1 = 0x1a;
            tcc2_tc3 = 0x1b;
            tc4_tc5 = 0x1c;
            tc6_tc7 = 0x1d;
            adc = 0x1e;
            ac_dig = 0x1f;
            ac_ana = 0x20;
            dac = 0x21;
            i2s_0 = 0x23;
            i2s_1 = 0x24;
        };
        $unused: 2;
        gen: BitEnum4 {
            gclk0 = 0x0;
            gclk1 = 0x1;
            gclk2 = 0x2;
            gclk3 = 0x3;
            gclk4 = 0x4;
            gclk5 = 0x5;
            gclk6 = 0x6;
            gclk7 = 0x7;
            gclk8 = 0x8;
        };
        $unused: 2;
        clken: 1;
        wrtlock: 1;
    };
    genctrl: BitField32 {
        id: 4;
        $unused: 4;
        src: BitEnum5 {
            xosc = 0x0;
            gclkin = 0x1;
            gclkgen1 = 0x2;
            osculp32k = 0x3;
            osc32k = 0x4;
            xosc32k = 0x5;
            osc8m = 0x6;
            dfll48m = 0x7;
            dpll96m = 0x8;
        };
        $unused: 3;
        genen: 1;
        idc: 1;
        oov: 1;
        oe: 1;
        divsel: 1;
        runstdby: 1;
        $unused: 10;
    };
    gendiv: BitField32 {
        id: 4;
        $unused: 4;
        div: 16;
        $unused: 8;
    };
}

# Here we define the RTCMode0 peripheral
# You can find the register definitions in the datasheet for the SAMD21
MemoryMappedPeripheral RTCMode0 @0x40001400 !3 {
    ctrl: BitField16 {
        swrst: 1;
        enable: 1;
        mode: BitEnum2 {
            count32 = 0x0;
            count16 = 0x1;
            clock = 0x2;
        };
        $unused: 3;
        matchclr: 1;
        prescaler: BitEnum4 {
            div1 = 0x0;
            div2 = 0x1;
            div4 = 0x2;
            div8 = 0x3;
            div16 = 0x4;
            div32 = 0x5;
            div64 = 0x6;
            div128 = 0x7;
            div256 = 0x8;
            div512 = 0x9;
            div1024 = 0xa;
        };
        $unused: 3;
    };
    readreq: BitField16 {
        addr: 6;
        $unused: 8;
        rcont: 1;
        rreq: 1;
    };
    evctrl: BitField16 {
        pereo0: 1;
        pereo1: 1;
        pereo2: 1;
        pereo3: 1;
        pereo4: 1;
        pereo5: 1;
        pereo6: 1;
        pereo7: 1;
        compeo0: 1;
        $unused: 6;
        ovfeo: 1;
    };
    intenclr: BitField8 {
        comp0: 1;
        $unused: 5;
        syncrdy: 1;
        ovf: 1;
    };
    intenset: BitField8 {
        comp0: 1;
        $unused: 5;
        syncrdy: 1;
        ovf: 1;
    };
    intflag: BitField8 {
        comp0: 1;
        $unused: 5;
        syncrdy: 1;
        ovf: 1;
    };
    $unused: u8;
    status: BitField8 {
        $unused: 7;
        syncbusy: 1;
    };
    dbgctrl: BitField8 {
        dbgrun: 1;
        $unused: 7;
    };
    freqcorr: BitField8 {
        value: 7;
        sign: 1;
    };
    $unused: u16;
    $unused: u8;
    count: u32;
    $unused: u32;
    comp0: u32;
}

# Here we define the PowerManager peripheral
# You can find the register definitions in the datasheet for the SAMD21
MemoryMappedPeripheral PowerManager @0x40000400 {
    ctrla: u8;
    sleep: u8;
    $unused: u16;
    $unused: u32;
    cpusel: u8;
    apbasel: u8;
    apbbsel: u8;
    apbcsel: u8;
    $unused: u32;
    $unused: u32;
    ahbmask: u32;
    apbamask: u32;
    apbbmask: u32;
    apbcmask: BitField32 {
        pac2: 1;
        evsys: 1;
        sercom0: 1;
        sercom1: 1;
        sercom2: 1;
        sercom3: 1;
        sercom4: 1;
        sercom5: 1;
        tcc0: 1;
        tcc1: 1;
        tcc2: 1;
        tc3: 1;
        tc4: 1;
        tc5: 1;
        tc6: 1;
        tc7: 1;
        adc: 1;
        ac: 1;
        dac: 1;
        ptc: 1;
        i2s: 1;
        ac1: 1;
        $unused: 2;
        tcc3: 1;
        $unused: 7;
    };
}

# Here we define the TCC0 peripheral
# You can find the register definitions in the datasheet for the SAMD21
MemoryMappedPeripheral TCC0 @0x42002000 {
    ctrla: BitField32 {
        swrst: 1;
        enable: 1;
        $unused: 3;
        resolution: 2;
        $unused: 1;
        prescaler: 3;
        runstdby: 1;
        prescync: 2;
        alock: 1;
        $unused: 1;
        $unused: 8;
        cpten0: 1;
        cpten1: 1;
        cpten2: 1;
        cpten3: 1;
    };
    ctrlbclr: BitField8 {
        dir: 1;
        lupd: 1;
        oneshot: 1;
        idxcmd: 2;
        cmd: 3;
    };
    ctrlbset: BitField8 {
        dir: 1;
        lupd: 1;
        oneshot: 1;
        idxcmd: 2;
        cmd: 3;
    };
    $unused: u16;
    syncbusy: u32;
    fctrla: u32;
    fctrlb: u32;
    wexctrl: u32;
    drvctrl: u32;
    $unused: u16;
    dbgctrl: u8;
    $unused: u8;
    evctrl: u32;
    intenclr: u32;
    intenset: u32;
    intflag: u32;
    status: u32;
    count: u32;
    patt: u16;
    $unused: u16;
    wave: BitField32 {
        wavegen: 3;
        $unused: 1;
        ramp: 2;
        $unused: 1;
        ciperen: 1;
        ciccen0: 1;
        ciccen1: 1;
        ciccen2: 1;
        ciccen3: 1;
        $unused: 4;
        pol0: 1;
        pol1: 1;
        pol2: 1;
        pol3: 1;
        $unused: 4;
        swap0: 1;
        swap1: 1;
        swap2: 1;
        swap3: 1;
        $unused: 4;
    };
    per: BitField32 {
        dither: 6;
        per: 18;
        $unused: 8;
    };
    cc0: BitField32 {
        dither: 6;
        cc: 18;
        $unused: 8;
    };
    cc1: u32;
    cc2: u32;
    cc3: u32;
    $unused: u32;
    $unused: u32;
    $unused: u32;
    $unused: u32;
    pattb: u16;
    $unused: u16;
    waveb: u32;
    perb: u32;
    ccb0: u32;
    ccb1: u32;
    ccb2: u32;
    ccb3: u32;
}

# Here we define the initial values of the PowerManager registers
# This turns on the peripheral clock for TCC0
initialize PowerManager {
    apbcmask = {
        tcc0 = 1;
    };
}

# Here we define the initial values of the PortB registers
# This sets the dir bit of pin 30 so that we can use it as a PWM output with TCC0, which is Function E for PB30
# Pin 30 is connected to the on-board LED
initialize PortB {
    outclr = 0x40000000; # 1 << 30
    dir = 0x40000000; # 1 << 30
    wrconfig = {
        hwsel = 1;
        pinmask = 0x4000;
        wrpincfg = 1;
        pmuxen = 1;
        wrpmux = 1;
        pmux = 0x4; # function E
    };
}

# Here we define the initial values of the GCLK registers
# Note that these will be set in order from top to bottom
# This sets the internal 32khz clock to drive "GCLK 5"
# Then this sets "GCLK 5" to drive the the TCC0 peripheral
# You can find the directions for configuring this peripheral in the datasheet for the SAMD21
initialize GCLK {
    gendiv = {
        id = 5;
        div = 0;
    };
    genctrl = {
        id = 5;
        src = osculp32k;
        genen = 1;
    };
    clkctrl = {
        id = tcc0_tcc1;
        gen = gclk5;
        clken = 1;
    };
}

# initialize TCC0/WO[0] to be a PWM output, that maps to PB30
# need to enable CLK_TCC0_APB in power manager
initialize TCC0 {
    wave = {
        wavegen = 0x2; # npwm
    };
    ctrla = {
        enable = 1;
    };
    per = {
        per = 4;
    };
    # cc0 controls the duty cycle
    cc0 = {
        cc = 0;
    };
    # might need to set prescaler?
}

# Here we define the initial values of the PortA registers
# This sets the dir bit of pin 15 so that we can use it as input
# Pin 15 is connected to the on-board switch
initialize PortA {
    dirclr = 0x00008000; # 1 << 15
    outset = 0x00008000; # 1 << 15
    wrconfig = {
        hwsel = 0;
        pinmask = 0x8000;
        wrpincfg = 1;
        inen = 1;
        pullen = 1;
    };
}

# Here we define the initial values of the GCLK registers
# Note that these will be set in order from top to bottom
# This sets the internal 32khz clock to drive "GCLK 4"
# Then this sets "GCLK 4" to drive the the RealTimeClock peripheral
# You can find the directions for configuring this peripheral in the datasheet for the SAMD21
initialize GCLK {
    gendiv = {
        id = 4;
        div = 0;
    };
    genctrl = {
        id = 4;
        src = osculp32k;
        genen = 1;
    };
    clkctrl = {
        id = rtc;
        gen = gclk4;
        clken = 1;
    };
}

# Here we define the initial values of the RTCMode0 registers
# This sets it to be in "Count" mode and sets the interrupt to fire when the count
# reaches 0x80.
# Since the we set a 32khz clock to drive the RTC, it will reach 0x80 256 times per second.
# We set "matchclr" so that the count will go back to zero and continue counting after
# it reaches 0x80.
initialize RTCMode0 {
    count = 0x0;
    comp0 = 0x800;
    intenset = {
        comp0 = 1;
    };
    ctrl = {
        enable = 1;
        mode = count32;
        matchclr = 1;
    };
}

# This defines a static variable, which is a global variable at a static location in memory
static u32 pressed = 0;

# on_interrupt keyword auto-enables interrupt in NVIC
on_interrupt RTCMode0 {
    u32 led_level = 0;

    if (PortA.in & 0x8000 == 0) {
        # if button is pressed and wasn't before
        # update the led_level and set pressed
        if (pressed == 0) {
            pressed = 1;
            led_level = TCC0.cc0 >> 6;
            if (led_level == 5) {
                led_level = 1;
            } else {
                led_level = led_level + 1;
            }
            TCC0.cc0 = led_level << 6;
        }
    } else {
        # if button is not pressed, reset state
        pressed = 0;
    }

    # This clears the RTC peripheral interrupt flag
    RTCMode0.intflag = {
        comp0 = 1;
    };
    # end of on_interrupt auto-clears interrupt in NVIC
}
